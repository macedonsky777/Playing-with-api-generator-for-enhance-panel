# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.activity_context import ActivityContext

class TestActivityContext(unittest.TestCase):
    """ActivityContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ActivityContext:
        """Test ActivityContext
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ActivityContext`
        """
        model = ActivityContext()
        if include_optional:
            return ActivityContext(
                org = openapi_client.models.activity_org_entity.ActivityOrgEntity(
                    type = 'org', 
                    content = openapi_client.models.activity_org_entity_content.ActivityOrgEntity_content(
                        id = '', 
                        detail = openapi_client.models.activity_org_entity_content_detail.ActivityOrgEntity_content_detail(
                            ok = openapi_client.models.activity_org_entity_detail.ActivityOrgEntityDetail(
                                name = '', ), 
                            error = openapi_client.models.http_error.HttpError(
                                code = '', 
                                message = '', ), ), ), ),
                website = openapi_client.models.activity_website_entity.ActivityWebsiteEntity(
                    type = 'website', 
                    content = openapi_client.models.activity_website_entity_content.ActivityWebsiteEntity_content(
                        id = '', 
                        detail = openapi_client.models.activity_website_entity_content_detail.ActivityWebsiteEntity_content_detail(
                            ok = openapi_client.models.activity_website_entity_detail.ActivityWebsiteEntityDetail(
                                domain = '', 
                                subscription_id = '', 
                                org_id = '', ), 
                            error = openapi_client.models.http_error.HttpError(
                                code = '', 
                                message = '', ), ), ), ),
                domain = openapi_client.models.activity_domain_entity.ActivityDomainEntity(
                    type = 'domain', 
                    content = openapi_client.models.activity_domain_entity_content.ActivityDomainEntity_content(
                        id = '', 
                        detail = openapi_client.models.activity_domain_entity_content_detail.ActivityDomainEntity_content_detail(
                            ok = openapi_client.models.activity_domain_entity_detail.ActivityDomainEntityDetail(
                                name = '', 
                                org_id = '', 
                                website_id = '', 
                                mapping_kind = 'primary', ), 
                            error = openapi_client.models.http_error.HttpError(
                                code = '', 
                                message = '', ), ), ), ),
                actor = None,
                server = openapi_client.models.activity_server_entity.ActivityServerEntity(
                    type = 'server', 
                    content = openapi_client.models.activity_server_entity_content.ActivityServerEntity_content(
                        id = '', 
                        detail = openapi_client.models.activity_server_entity_content_detail.ActivityServerEntity_content_detail(
                            ok = openapi_client.models.activity_server_entity_detail.ActivityServerEntityDetail(
                                friendly_name = '', 
                                hostname = '', ), 
                            error = openapi_client.models.http_error.HttpError(
                                code = '', 
                                message = '', ), ), ), ),
                error = openapi_client.models.activity_error_entity.ActivityErrorEntity(
                    type = 'error', 
                    content = openapi_client.models.activity_error_entity_content.ActivityErrorEntity_content(
                        detail = openapi_client.models.http_error.HttpError(
                            code = '', 
                            message = '', ), ), )
            )
        else:
            return ActivityContext(
        )
        """

    def testActivityContext(self):
        """Test ActivityContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
