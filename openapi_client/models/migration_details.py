# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.migration_status import MigrationStatus
from openapi_client.models.server_role import ServerRole
from typing import Optional, Set
from typing_extensions import Self

class MigrationDetails(BaseModel):
    """
    MigrationDetails
    """ # noqa: E501
    id: StrictStr
    website_id: StrictStr = Field(alias="websiteId")
    source_server_id: StrictStr = Field(alias="sourceServerId")
    dest_server_id: StrictStr = Field(alias="destServerId")
    dest_server_name: StrictStr = Field(alias="destServerName")
    server_role: ServerRole = Field(alias="serverRole")
    migration_status: MigrationStatus = Field(alias="migrationStatus")
    created_at: StrictStr = Field(alias="createdAt")
    last_updated: StrictStr = Field(alias="lastUpdated")
    website_primary_domain: StrictStr = Field(alias="websitePrimaryDomain")
    percentage_complete: StrictInt = Field(alias="percentageComplete")
    session_id: StrictStr = Field(alias="sessionId")
    __properties: ClassVar[List[str]] = ["id", "websiteId", "sourceServerId", "destServerId", "destServerName", "serverRole", "migrationStatus", "createdAt", "lastUpdated", "websitePrimaryDomain", "percentageComplete", "sessionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "websiteId": obj.get("websiteId"),
            "sourceServerId": obj.get("sourceServerId"),
            "destServerId": obj.get("destServerId"),
            "destServerName": obj.get("destServerName"),
            "serverRole": obj.get("serverRole"),
            "migrationStatus": obj.get("migrationStatus"),
            "createdAt": obj.get("createdAt"),
            "lastUpdated": obj.get("lastUpdated"),
            "websitePrimaryDomain": obj.get("websitePrimaryDomain"),
            "percentageComplete": obj.get("percentageComplete"),
            "sessionId": obj.get("sessionId")
        })
        return _obj


