# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.login2_fa_remember_me import Login2FARememberMe
from typing import Optional, Set
from typing_extensions import Self

class Login2FA(BaseModel):
    """
    Login2FA
    """ # noqa: E501
    auth_method: StrictStr = Field(alias="authMethod")
    pin: StrictStr
    remember_me: Optional[Login2FARememberMe] = Field(default=None, alias="rememberMe")
    __properties: ClassVar[List[str]] = ["authMethod", "pin", "rememberMe"]

    @field_validator('auth_method')
    def auth_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['basic', 'email', 'otp']):
            raise ValueError("must be one of enum values ('basic', 'email', 'otp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Login2FA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remember_me
        if self.remember_me:
            _dict['rememberMe'] = self.remember_me.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Login2FA from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authMethod": obj.get("authMethod"),
            "pin": obj.get("pin"),
            "rememberMe": Login2FARememberMe.from_dict(obj["rememberMe"]) if obj.get("rememberMe") is not None else None
        })
        return _obj


