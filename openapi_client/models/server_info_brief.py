# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.role_installed_status_summary import RoleInstalledStatusSummary
from openapi_client.models.server_ip import ServerIp
from typing import Optional, Set
from typing_extensions import Self

class ServerInfoBrief(BaseModel):
    """
    ServerInfoBrief
    """ # noqa: E501
    id: StrictStr
    group_id: StrictStr = Field(alias="groupId")
    is_control_panel: StrictBool = Field(alias="isControlPanel")
    is_configured: StrictBool = Field(alias="isConfigured")
    friendly_name: StrictStr = Field(alias="friendlyName")
    hostname: StrictStr
    ips: List[ServerIp]
    roles: RoleInstalledStatusSummary
    created_at: StrictStr = Field(alias="createdAt")
    dedicated_subscription: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dedicatedSubscription")
    is_decommissioned: StrictBool = Field(alias="isDecommissioned")
    ipv6_addr: Optional[StrictStr] = Field(default=None, alias="ipv6Addr")
    __properties: ClassVar[List[str]] = ["id", "groupId", "isControlPanel", "isConfigured", "friendlyName", "hostname", "ips", "roles", "createdAt", "dedicatedSubscription", "isDecommissioned", "ipv6Addr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerInfoBrief from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ips (list)
        _items = []
        if self.ips:
            for _item in self.ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ips'] = _items
        # override the default output from pydantic by calling `to_dict()` of roles
        if self.roles:
            _dict['roles'] = self.roles.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerInfoBrief from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "groupId": obj.get("groupId"),
            "isControlPanel": obj.get("isControlPanel"),
            "isConfigured": obj.get("isConfigured"),
            "friendlyName": obj.get("friendlyName"),
            "hostname": obj.get("hostname"),
            "ips": [ServerIp.from_dict(_item) for _item in obj["ips"]] if obj.get("ips") is not None else None,
            "roles": RoleInstalledStatusSummary.from_dict(obj["roles"]) if obj.get("roles") is not None else None,
            "createdAt": obj.get("createdAt"),
            "dedicatedSubscription": obj.get("dedicatedSubscription"),
            "isDecommissioned": obj.get("isDecommissioned"),
            "ipv6Addr": obj.get("ipv6Addr")
        })
        return _obj


