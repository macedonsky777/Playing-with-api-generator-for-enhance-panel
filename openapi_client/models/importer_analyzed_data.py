# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.importer_analyzed_data_crontabs_inner import ImporterAnalyzedDataCrontabsInner
from openapi_client.models.importer_analyzed_data_domains_inner import ImporterAnalyzedDataDomainsInner
from openapi_client.models.importer_analyzed_data_ftps_inner import ImporterAnalyzedDataFtpsInner
from openapi_client.models.importer_analyzed_data_mailboxes_inner import ImporterAnalyzedDataMailboxesInner
from openapi_client.models.importer_analyzed_data_mysql_databases_inner import ImporterAnalyzedDataMysqlDatabasesInner
from openapi_client.models.importer_analyzed_data_mysql_grants_inner import ImporterAnalyzedDataMysqlGrantsInner
from openapi_client.models.importer_analyzed_data_mysql_users_inner import ImporterAnalyzedDataMysqlUsersInner
from typing import Optional, Set
from typing_extensions import Self

class ImporterAnalyzedData(BaseModel):
    """
    ImporterAnalyzedData
    """ # noqa: E501
    domains: List[ImporterAnalyzedDataDomainsInner]
    mysql_databases: Optional[List[ImporterAnalyzedDataMysqlDatabasesInner]] = Field(default=None, alias="mysqlDatabases")
    mysql_users: Optional[List[ImporterAnalyzedDataMysqlUsersInner]] = Field(default=None, alias="mysqlUsers")
    mysql_grants: Optional[List[ImporterAnalyzedDataMysqlGrantsInner]] = Field(default=None, alias="mysqlGrants")
    crontabs: Optional[List[ImporterAnalyzedDataCrontabsInner]] = None
    ftps: Optional[List[ImporterAnalyzedDataFtpsInner]] = None
    mailboxes: Optional[List[ImporterAnalyzedDataMailboxesInner]] = None
    __properties: ClassVar[List[str]] = ["domains", "mysqlDatabases", "mysqlUsers", "mysqlGrants", "crontabs", "ftps", "mailboxes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImporterAnalyzedData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in domains (list)
        _items = []
        if self.domains:
            for _item in self.domains:
                if _item:
                    _items.append(_item.to_dict())
            _dict['domains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mysql_databases (list)
        _items = []
        if self.mysql_databases:
            for _item in self.mysql_databases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mysqlDatabases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mysql_users (list)
        _items = []
        if self.mysql_users:
            for _item in self.mysql_users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mysqlUsers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mysql_grants (list)
        _items = []
        if self.mysql_grants:
            for _item in self.mysql_grants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mysqlGrants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in crontabs (list)
        _items = []
        if self.crontabs:
            for _item in self.crontabs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['crontabs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ftps (list)
        _items = []
        if self.ftps:
            for _item in self.ftps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ftps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mailboxes (list)
        _items = []
        if self.mailboxes:
            for _item in self.mailboxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mailboxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImporterAnalyzedData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domains": [ImporterAnalyzedDataDomainsInner.from_dict(_item) for _item in obj["domains"]] if obj.get("domains") is not None else None,
            "mysqlDatabases": [ImporterAnalyzedDataMysqlDatabasesInner.from_dict(_item) for _item in obj["mysqlDatabases"]] if obj.get("mysqlDatabases") is not None else None,
            "mysqlUsers": [ImporterAnalyzedDataMysqlUsersInner.from_dict(_item) for _item in obj["mysqlUsers"]] if obj.get("mysqlUsers") is not None else None,
            "mysqlGrants": [ImporterAnalyzedDataMysqlGrantsInner.from_dict(_item) for _item in obj["mysqlGrants"]] if obj.get("mysqlGrants") is not None else None,
            "crontabs": [ImporterAnalyzedDataCrontabsInner.from_dict(_item) for _item in obj["crontabs"]] if obj.get("crontabs") is not None else None,
            "ftps": [ImporterAnalyzedDataFtpsInner.from_dict(_item) for _item in obj["ftps"]] if obj.get("ftps") is not None else None,
            "mailboxes": [ImporterAnalyzedDataMailboxesInner.from_dict(_item) for _item in obj["mailboxes"]] if obj.get("mailboxes") is not None else None
        })
        return _obj


