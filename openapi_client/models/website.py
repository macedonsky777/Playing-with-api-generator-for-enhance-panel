# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.backup_action import BackupAction
from openapi_client.models.can_use import CanUse
from openapi_client.models.php_version import PhpVersion
from openapi_client.models.server_ip import ServerIp
from openapi_client.models.site_access_member import SiteAccessMember
from openapi_client.models.tag import Tag
from openapi_client.models.website_domain import WebsiteDomain
from openapi_client.models.website_kind import WebsiteKind
from openapi_client.models.website_status import WebsiteStatus
from typing import Optional, Set
from typing_extensions import Self

class Website(BaseModel):
    """
    Website
    """ # noqa: E501
    id: StrictStr
    domain: WebsiteDomain
    aliases: List[WebsiteDomain]
    subdomains: List[Any]
    subscription_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="subscriptionId")
    plan_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="planId")
    plan: Optional[StrictStr] = None
    status: WebsiteStatus
    suspended_by: Optional[StrictStr] = Field(default=None, alias="suspendedBy")
    color_code: StrictStr = Field(alias="colorCode")
    tags: Optional[List[Tag]] = None
    size: StrictInt
    org_id: StrictStr = Field(alias="orgId")
    org: Optional[StrictStr] = None
    kind: WebsiteKind
    pending_backup: Optional[BackupAction] = Field(default=None, alias="pendingBackup")
    parent: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    app_server_id: Optional[StrictStr] = Field(default=None, description="The id of the server on which this website is located. This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.", alias="appServerId")
    backup_server_id: Optional[StrictStr] = Field(default=None, description="The id of the server on which the backups of this website are located. This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.", alias="backupServerId")
    db_server_id: Optional[StrictStr] = Field(default=None, description="The id of the server on which the databases of this website are located. This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.", alias="dbServerId")
    email_server_id: Optional[StrictStr] = Field(default=None, description="The id of the server on which the emails of this website are located. This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.", alias="emailServerId")
    unix_user: Optional[StrictStr] = Field(default=None, description="The unix user assigned to this website, used for ssh shells, prefixing website databases and databse users, etc.", alias="unixUser")
    site_access_members: Optional[List[SiteAccessMember]] = Field(default=None, alias="siteAccessMembers")
    server_ips: Optional[List[ServerIp]] = Field(default=None, description="The addresses of the the server on which this website is located.", alias="serverIps")
    backup_server_ips: Optional[List[ServerIp]] = Field(default=None, description="The addresses of the the server on which this website's backups are located.", alias="backupServerIps")
    db_server_ips: Optional[List[ServerIp]] = Field(default=None, description="The addresses of the the server on which this website's databases are located.", alias="dbServerIps")
    email_server_ips: Optional[List[ServerIp]] = Field(default=None, description="The addresses of the the server on which this website's emails are located.", alias="emailServerIps")
    filerd_address: Optional[StrictStr] = Field(default=None, description="The path relative to the control panel domain where filerd can be accessed.", alias="filerdAddress")
    php_version: Optional[PhpVersion] = Field(default=None, alias="phpVersion")
    created_at: StrictStr = Field(description="The date the site was first added", alias="createdAt")
    app_server_name: Optional[StrictStr] = Field(default=None, alias="appServerName")
    db_server_name: Optional[StrictStr] = Field(default=None, alias="dbServerName")
    email_server_name: Optional[StrictStr] = Field(default=None, alias="emailServerName")
    backup_server_name: Optional[StrictStr] = Field(default=None, alias="backupServerName")
    can_use: Optional[CanUse] = Field(default=None, alias="canUse")
    app_server_ipv6: Optional[StrictStr] = Field(default=None, alias="appServerIpv6")
    db_server_ipv6: Optional[StrictStr] = Field(default=None, alias="dbServerIpv6")
    email_server_ipv6: Optional[StrictStr] = Field(default=None, alias="emailServerIpv6")
    __properties: ClassVar[List[str]] = ["id", "domain", "aliases", "subdomains", "subscriptionId", "planId", "plan", "status", "suspendedBy", "colorCode", "tags", "size", "orgId", "org", "kind", "pendingBackup", "parent", "parentId", "appServerId", "backupServerId", "dbServerId", "emailServerId", "unixUser", "siteAccessMembers", "serverIps", "backupServerIps", "dbServerIps", "emailServerIps", "filerdAddress", "phpVersion", "createdAt", "appServerName", "dbServerName", "emailServerName", "backupServerName", "canUse", "appServerIpv6", "dbServerIpv6", "emailServerIpv6"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Website from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in aliases (list)
        _items = []
        if self.aliases:
            for _item in self.aliases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['aliases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in site_access_members (list)
        _items = []
        if self.site_access_members:
            for _item in self.site_access_members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['siteAccessMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in server_ips (list)
        _items = []
        if self.server_ips:
            for _item in self.server_ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serverIps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in backup_server_ips (list)
        _items = []
        if self.backup_server_ips:
            for _item in self.backup_server_ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['backupServerIps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in db_server_ips (list)
        _items = []
        if self.db_server_ips:
            for _item in self.db_server_ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dbServerIps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email_server_ips (list)
        _items = []
        if self.email_server_ips:
            for _item in self.email_server_ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['emailServerIps'] = _items
        # override the default output from pydantic by calling `to_dict()` of can_use
        if self.can_use:
            _dict['canUse'] = self.can_use.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Website from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "domain": WebsiteDomain.from_dict(obj["domain"]) if obj.get("domain") is not None else None,
            "aliases": [WebsiteDomain.from_dict(_item) for _item in obj["aliases"]] if obj.get("aliases") is not None else None,
            "subdomains": obj.get("subdomains"),
            "subscriptionId": obj.get("subscriptionId"),
            "planId": obj.get("planId"),
            "plan": obj.get("plan"),
            "status": obj.get("status"),
            "suspendedBy": obj.get("suspendedBy"),
            "colorCode": obj.get("colorCode"),
            "tags": [Tag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "size": obj.get("size"),
            "orgId": obj.get("orgId"),
            "org": obj.get("org"),
            "kind": obj.get("kind"),
            "pendingBackup": obj.get("pendingBackup"),
            "parent": obj.get("parent"),
            "parentId": obj.get("parentId"),
            "appServerId": obj.get("appServerId"),
            "backupServerId": obj.get("backupServerId"),
            "dbServerId": obj.get("dbServerId"),
            "emailServerId": obj.get("emailServerId"),
            "unixUser": obj.get("unixUser"),
            "siteAccessMembers": [SiteAccessMember.from_dict(_item) for _item in obj["siteAccessMembers"]] if obj.get("siteAccessMembers") is not None else None,
            "serverIps": [ServerIp.from_dict(_item) for _item in obj["serverIps"]] if obj.get("serverIps") is not None else None,
            "backupServerIps": [ServerIp.from_dict(_item) for _item in obj["backupServerIps"]] if obj.get("backupServerIps") is not None else None,
            "dbServerIps": [ServerIp.from_dict(_item) for _item in obj["dbServerIps"]] if obj.get("dbServerIps") is not None else None,
            "emailServerIps": [ServerIp.from_dict(_item) for _item in obj["emailServerIps"]] if obj.get("emailServerIps") is not None else None,
            "filerdAddress": obj.get("filerdAddress"),
            "phpVersion": obj.get("phpVersion"),
            "createdAt": obj.get("createdAt"),
            "appServerName": obj.get("appServerName"),
            "dbServerName": obj.get("dbServerName"),
            "emailServerName": obj.get("emailServerName"),
            "backupServerName": obj.get("backupServerName"),
            "canUse": CanUse.from_dict(obj["canUse"]) if obj.get("canUse") is not None else None,
            "appServerIpv6": obj.get("appServerIpv6"),
            "dbServerIpv6": obj.get("dbServerIpv6"),
            "emailServerIpv6": obj.get("emailServerIpv6")
        })
        return _obj


