# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cgroup_limits import CgroupLimits
from openapi_client.models.fs_quota_limit import FsQuotaLimit
from openapi_client.models.php_version import PhpVersion
from openapi_client.models.plan_type import PlanType
from openapi_client.models.update_plan_default_server_group_id import UpdatePlanDefaultServerGroupId
from typing import Optional, Set
from typing_extensions import Self

class UpdatePlan(BaseModel):
    """
    UpdatePlan
    """ # noqa: E501
    name: Optional[StrictStr] = None
    plan_type: Optional[PlanType] = Field(default=None, alias="planType")
    cgroup_limits: Optional[CgroupLimits] = Field(default=None, alias="cgroupLimits")
    fs_quota_limit: Optional[FsQuotaLimit] = Field(default=None, alias="fsQuotaLimit")
    allowed_php_versions: Optional[List[PhpVersion]] = Field(default=None, alias="allowedPhpVersions")
    default_php_version: Optional[PhpVersion] = Field(default=None, alias="defaultPhpVersion")
    redis_allowed: Optional[StrictBool] = Field(default=None, alias="redisAllowed")
    server_group_ids: Optional[List[StrictStr]] = Field(default=None, description="If provided as an empty array, removes all server groups from the plan. ", alias="serverGroupIds")
    allow_server_group_selection: Optional[StrictBool] = Field(default=None, description="Whether the customer can select the server group for their websites. ", alias="allowServerGroupSelection")
    default_server_group_id: Optional[UpdatePlanDefaultServerGroupId] = Field(default=None, alias="defaultServerGroupId")
    preinstall_wordpress_theme: Optional[StrictStr] = Field(default=None, description=":> When WordPress is installed on a website under this plan, the chosen theme will be preinstalled.", alias="preinstallWordpressTheme")
    __properties: ClassVar[List[str]] = ["name", "planType", "cgroupLimits", "fsQuotaLimit", "allowedPhpVersions", "defaultPhpVersion", "redisAllowed", "serverGroupIds", "allowServerGroupSelection", "defaultServerGroupId", "preinstallWordpressTheme"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cgroup_limits
        if self.cgroup_limits:
            _dict['cgroupLimits'] = self.cgroup_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fs_quota_limit
        if self.fs_quota_limit:
            _dict['fsQuotaLimit'] = self.fs_quota_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_server_group_id
        if self.default_server_group_id:
            _dict['defaultServerGroupId'] = self.default_server_group_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "planType": obj.get("planType"),
            "cgroupLimits": CgroupLimits.from_dict(obj["cgroupLimits"]) if obj.get("cgroupLimits") is not None else None,
            "fsQuotaLimit": FsQuotaLimit.from_dict(obj["fsQuotaLimit"]) if obj.get("fsQuotaLimit") is not None else None,
            "allowedPhpVersions": obj.get("allowedPhpVersions"),
            "defaultPhpVersion": obj.get("defaultPhpVersion"),
            "redisAllowed": obj.get("redisAllowed"),
            "serverGroupIds": obj.get("serverGroupIds"),
            "allowServerGroupSelection": obj.get("allowServerGroupSelection"),
            "defaultServerGroupId": UpdatePlanDefaultServerGroupId.from_dict(obj["defaultServerGroupId"]) if obj.get("defaultServerGroupId") is not None else None,
            "preinstallWordpressTheme": obj.get("preinstallWordpressTheme")
        })
        return _obj


