# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.tld_ns import TldNs
from typing import Optional, Set
from typing_extensions import Self

class DnsQueryOutcome(BaseModel):
    """
    Detailed DNS query outcome, walking from root DNS to all the way back to IP addresses for a domain
    """ # noqa: E501
    fqdn: StrictStr = Field(description="Fully qualified domain name")
    root: Dict[str, StrictStr] = Field(description="name and IP of the root server that was queried")
    tld_ns_map: Dict[str, TldNs] = Field(description="Tree of top level domain name servers", alias="tldNsMap")
    __properties: ClassVar[List[str]] = ["fqdn", "root", "tldNsMap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DnsQueryOutcome from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in tld_ns_map (dict)
        _field_dict = {}
        if self.tld_ns_map:
            for _key in self.tld_ns_map:
                if self.tld_ns_map[_key]:
                    _field_dict[_key] = self.tld_ns_map[_key].to_dict()
            _dict['tldNsMap'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DnsQueryOutcome from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fqdn": obj.get("fqdn"),
            "root": obj.get("root"),
            "tldNsMap": dict(
                (_k, TldNs.from_dict(_v))
                for _k, _v in obj["tldNsMap"].items()
            )
            if obj.get("tldNsMap") is not None
            else None
        })
        return _obj


