# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.import_kind import ImportKind
from openapi_client.models.server_migration_settings_auth_type import ServerMigrationSettingsAuthType
from typing import Optional, Set
from typing_extensions import Self

class NewImportServerSettings(BaseModel):
    """
    NewImportServerSettings
    """ # noqa: E501
    allow_partial_sync: Optional[StrictBool] = Field(default=None, alias="allowPartialSync")
    hostname: StrictStr
    friendly_name: StrictStr = Field(alias="friendlyName")
    ssh_user: StrictStr = Field(alias="sshUser")
    import_type: ImportKind = Field(alias="importType")
    auth_kind: ServerMigrationSettingsAuthType = Field(alias="authKind")
    auth_user: StrictStr = Field(alias="authUser")
    auth_pass: StrictStr = Field(alias="authPass")
    ssh_port: Union[StrictFloat, StrictInt] = Field(alias="sshPort")
    api_port: Union[StrictFloat, StrictInt] = Field(alias="apiPort")
    __properties: ClassVar[List[str]] = ["allowPartialSync", "hostname", "friendlyName", "sshUser", "importType", "authKind", "authUser", "authPass", "sshPort", "apiPort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewImportServerSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewImportServerSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPartialSync": obj.get("allowPartialSync"),
            "hostname": obj.get("hostname"),
            "friendlyName": obj.get("friendlyName"),
            "sshUser": obj.get("sshUser"),
            "importType": obj.get("importType"),
            "authKind": obj.get("authKind"),
            "authUser": obj.get("authUser"),
            "authPass": obj.get("authPass"),
            "sshPort": obj.get("sshPort"),
            "apiPort": obj.get("apiPort")
        })
        return _obj


