# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.quota import Quota
from openapi_client.models.website_status import WebsiteStatus
from typing import Optional, Set
from typing_extensions import Self

class EmailDetailed(BaseModel):
    """
    EmailDetailed
    """ # noqa: E501
    id: StrictStr
    mailbox_name: Optional[StrictStr] = Field(default=None, alias="mailboxName")
    address: StrictStr
    aliases: List[StrictStr]
    forwarders: Optional[List[StrictStr]] = None
    mailbox_id: Optional[StrictStr] = Field(default=None, alias="mailboxId")
    status: WebsiteStatus
    quota: Optional[Quota] = None
    spam_threshold: Optional[StrictInt] = Field(default=None, alias="spamThreshold")
    spam_delivery: StrictStr = Field(alias="spamDelivery")
    blacklist: List[StrictStr]
    whitelist: List[StrictStr]
    autoresponders_count: StrictInt = Field(alias="autorespondersCount")
    created_at: StrictStr = Field(alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "mailboxName", "address", "aliases", "forwarders", "mailboxId", "status", "quota", "spamThreshold", "spamDelivery", "blacklist", "whitelist", "autorespondersCount", "createdAt"]

    @field_validator('spam_delivery')
    def spam_delivery_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['spamFolder', 'reject']):
            raise ValueError("must be one of enum values ('spamFolder', 'reject')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "mailboxName": obj.get("mailboxName"),
            "address": obj.get("address"),
            "aliases": obj.get("aliases"),
            "forwarders": obj.get("forwarders"),
            "mailboxId": obj.get("mailboxId"),
            "status": obj.get("status"),
            "quota": Quota.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "spamThreshold": obj.get("spamThreshold"),
            "spamDelivery": obj.get("spamDelivery"),
            "blacklist": obj.get("blacklist"),
            "whitelist": obj.get("whitelist"),
            "autorespondersCount": obj.get("autorespondersCount"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


