# coding: utf-8

"""
    orchd

    orchd API docs

    The version of the OpenAPI document: 10.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.autoresponders_full_listing import AutorespondersFullListing
from openapi_client.models.email_auth import EmailAuth
from openapi_client.models.email_auth_update import EmailAuthUpdate
from openapi_client.models.email_auth_validation import EmailAuthValidation
from openapi_client.models.email_detailed import EmailDetailed
from openapi_client.models.emails_listing import EmailsListing
from openapi_client.models.local_remote_body import LocalRemoteBody
from openapi_client.models.new_autoresponder import NewAutoresponder
from openapi_client.models.new_email import NewEmail
from openapi_client.models.new_resource_id import NewResourceId
from openapi_client.models.new_resource_uuid import NewResourceUuid
from openapi_client.models.update_autoresponder import UpdateAutoresponder
from openapi_client.models.update_email import UpdateEmail
from openapi_client.models.website_status import WebsiteStatus

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class EmailsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_website_email(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        new_email: Annotated[NewEmail, Field(description="New email details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NewResourceUuid:
        """Create an email under website's domain

        Creates a new email under the given website. The email may have a mailbox or it may be a forwarder, which means it merely serves to forward incoming emails to the specified email addresses. If a password is supplied, a mailbox is created. Otherwise, forwarders must be specified as an email must always have a delivery route. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param new_email: New email details. (required)
        :type new_email: NewEmail
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            new_email=new_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NewResourceUuid",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_website_email_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        new_email: Annotated[NewEmail, Field(description="New email details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NewResourceUuid]:
        """Create an email under website's domain

        Creates a new email under the given website. The email may have a mailbox or it may be a forwarder, which means it merely serves to forward incoming emails to the specified email addresses. If a password is supplied, a mailbox is created. Otherwise, forwarders must be specified as an email must always have a delivery route. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param new_email: New email details. (required)
        :type new_email: NewEmail
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            new_email=new_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NewResourceUuid",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_website_email_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        new_email: Annotated[NewEmail, Field(description="New email details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an email under website's domain

        Creates a new email under the given website. The email may have a mailbox or it may be a forwarder, which means it merely serves to forward incoming emails to the specified email addresses. If a password is supplied, a mailbox is created. Otherwise, forwarders must be specified as an email must always have a delivery route. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param new_email: New email details. (required)
        :type new_email: NewEmail
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            new_email=new_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NewResourceUuid",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_website_email_serialize(
        self,
        org_id,
        website_id,
        domain_id,
        new_email,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if domain_id is not None:
            _path_params['domain_id'] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if new_email is not None:
            _body_params = new_email


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/orgs/{org_id}/websites/{website_id}/domains/{domain_id}/emails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_website_email_autoresponder(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        new_autoresponder: Annotated[NewAutoresponder, Field(description="Autoresponder details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NewResourceId:
        """Create new website email autoresponder

        Creates a new autoresponder for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param new_autoresponder: Autoresponder details. (required)
        :type new_autoresponder: NewAutoresponder
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            new_autoresponder=new_autoresponder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NewResourceId",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_website_email_autoresponder_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        new_autoresponder: Annotated[NewAutoresponder, Field(description="Autoresponder details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NewResourceId]:
        """Create new website email autoresponder

        Creates a new autoresponder for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param new_autoresponder: Autoresponder details. (required)
        :type new_autoresponder: NewAutoresponder
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            new_autoresponder=new_autoresponder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NewResourceId",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_website_email_autoresponder_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        new_autoresponder: Annotated[NewAutoresponder, Field(description="Autoresponder details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create new website email autoresponder

        Creates a new autoresponder for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param new_autoresponder: Autoresponder details. (required)
        :type new_autoresponder: NewAutoresponder
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            new_autoresponder=new_autoresponder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NewResourceId",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_website_email_autoresponder_serialize(
        self,
        org_id,
        website_id,
        email_id,
        new_autoresponder,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if new_autoresponder is not None:
            _body_params = new_autoresponder


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}/autoresponders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_website_email(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete website email

        Deletes the email belonging to the given website. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_website_email_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete website email

        Deletes the email belonging to the given website. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_website_email_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete website email

        Deletes the email belonging to the given website. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_website_email_serialize(
        self,
        org_id,
        website_id,
        email_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_website_email_autoresponder(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        autoresponder_id: Annotated[StrictInt, Field(description="The id of the autoresponder.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete website email autoresponder

        Deletes the autoresponder belonging to the given website email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param autoresponder_id: The id of the autoresponder. (required)
        :type autoresponder_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            autoresponder_id=autoresponder_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_website_email_autoresponder_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        autoresponder_id: Annotated[StrictInt, Field(description="The id of the autoresponder.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete website email autoresponder

        Deletes the autoresponder belonging to the given website email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param autoresponder_id: The id of the autoresponder. (required)
        :type autoresponder_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            autoresponder_id=autoresponder_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_website_email_autoresponder_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        autoresponder_id: Annotated[StrictInt, Field(description="The id of the autoresponder.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete website email autoresponder

        Deletes the autoresponder belonging to the given website email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param autoresponder_id: The id of the autoresponder. (required)
        :type autoresponder_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            autoresponder_id=autoresponder_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_website_email_autoresponder_serialize(
        self,
        org_id,
        website_id,
        email_id,
        autoresponder_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        if autoresponder_id is not None:
            _path_params['autoresponder_id'] = autoresponder_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}/autoresponders/{autoresponder_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domain_email_auth(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmailAuth:
        """Get email authentication preferences

        Fetch DKIM setting for the mailboxes on a given domain.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailAuth",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domain_email_auth_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmailAuth]:
        """Get email authentication preferences

        Fetch DKIM setting for the mailboxes on a given domain.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailAuth",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domain_email_auth_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get email authentication preferences

        Fetch DKIM setting for the mailboxes on a given domain.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailAuth",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domain_email_auth_serialize(
        self,
        org_id,
        domain_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if domain_id is not None:
            _path_params['domain_id'] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/domains/{domain_id}/email-auth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domain_local_remote(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LocalRemoteBody:
        """Get the current local/remote status

        Fetches the current status of the domain, whether it is treated as local or remote by the MTA

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_local_remote_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LocalRemoteBody",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domain_local_remote_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LocalRemoteBody]:
        """Get the current local/remote status

        Fetches the current status of the domain, whether it is treated as local or remote by the MTA

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_local_remote_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LocalRemoteBody",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domain_local_remote_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the current local/remote status

        Fetches the current status of the domain, whether it is treated as local or remote by the MTA

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_local_remote_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LocalRemoteBody",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domain_local_remote_serialize(
        self,
        org_id,
        website_id,
        domain_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if domain_id is not None:
            _path_params['domain_id'] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/websites/{website_id}/domains/{domain_id}/local_remote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_emails(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        offset: Annotated[Optional[StrictInt], Field(description="The offset from which to return items.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field by which to sort.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.")] = None,
        recursive: Annotated[Optional[StrictBool], Field(description="If set to true, the endpoint will return resources in some hierarchy recursively, that is, several or all levels of the hierarchy, depending on whether `maxDepth` is set. E.g. for customers this means direct and indirect customers are returned. For websites, this returns websites of all direct and indirect customers.")] = None,
        max_depth: Annotated[Optional[StrictInt], Field(description="If recursive is set to true, this can be specified to limit the recursion depth. By default there is no recursion bound.")] = None,
        status: Annotated[Optional[WebsiteStatus], Field(description="Limit the result set to emails with the specified status. Only applicable if `recursive` is set to true.")] = None,
        domain_id: Annotated[Optional[StrictStr], Field(description="Limit the result set to emails under domain.")] = None,
        plan_id: Annotated[Optional[StrictInt], Field(description="Limit the result set to resources under subscriptions to the plan.")] = None,
        subscription_id: Annotated[Optional[StrictInt], Field(description="Limit the result set to resources under subscription.")] = None,
        include_internal: Annotated[Optional[StrictBool], Field(description="Include internal emails in response")] = None,
        show_deleted: Annotated[Optional[StrictBool], Field(description="Filters out deleted emails, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmailsListing:
        """Get org emails

        Returns all emails belonging to this organization. Session holder must be at least a `SuperAdmin` in this org or a parent org.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param offset: The offset from which to return items.
        :type offset: int
        :param limit: The maximum number of items to return.
        :type limit: int
        :param sort_by: The field by which to sort.
        :type sort_by: str
        :param sort_order: The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.
        :type sort_order: str
        :param search: Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.
        :type search: str
        :param recursive: If set to true, the endpoint will return resources in some hierarchy recursively, that is, several or all levels of the hierarchy, depending on whether `maxDepth` is set. E.g. for customers this means direct and indirect customers are returned. For websites, this returns websites of all direct and indirect customers.
        :type recursive: bool
        :param max_depth: If recursive is set to true, this can be specified to limit the recursion depth. By default there is no recursion bound.
        :type max_depth: int
        :param status: Limit the result set to emails with the specified status. Only applicable if `recursive` is set to true.
        :type status: WebsiteStatus
        :param domain_id: Limit the result set to emails under domain.
        :type domain_id: str
        :param plan_id: Limit the result set to resources under subscriptions to the plan.
        :type plan_id: int
        :param subscription_id: Limit the result set to resources under subscription.
        :type subscription_id: int
        :param include_internal: Include internal emails in response
        :type include_internal: bool
        :param show_deleted: Filters out deleted emails, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.
        :type show_deleted: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_emails_serialize(
            org_id=org_id,
            offset=offset,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            search=search,
            recursive=recursive,
            max_depth=max_depth,
            status=status,
            domain_id=domain_id,
            plan_id=plan_id,
            subscription_id=subscription_id,
            include_internal=include_internal,
            show_deleted=show_deleted,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailsListing",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_emails_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        offset: Annotated[Optional[StrictInt], Field(description="The offset from which to return items.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field by which to sort.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.")] = None,
        recursive: Annotated[Optional[StrictBool], Field(description="If set to true, the endpoint will return resources in some hierarchy recursively, that is, several or all levels of the hierarchy, depending on whether `maxDepth` is set. E.g. for customers this means direct and indirect customers are returned. For websites, this returns websites of all direct and indirect customers.")] = None,
        max_depth: Annotated[Optional[StrictInt], Field(description="If recursive is set to true, this can be specified to limit the recursion depth. By default there is no recursion bound.")] = None,
        status: Annotated[Optional[WebsiteStatus], Field(description="Limit the result set to emails with the specified status. Only applicable if `recursive` is set to true.")] = None,
        domain_id: Annotated[Optional[StrictStr], Field(description="Limit the result set to emails under domain.")] = None,
        plan_id: Annotated[Optional[StrictInt], Field(description="Limit the result set to resources under subscriptions to the plan.")] = None,
        subscription_id: Annotated[Optional[StrictInt], Field(description="Limit the result set to resources under subscription.")] = None,
        include_internal: Annotated[Optional[StrictBool], Field(description="Include internal emails in response")] = None,
        show_deleted: Annotated[Optional[StrictBool], Field(description="Filters out deleted emails, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmailsListing]:
        """Get org emails

        Returns all emails belonging to this organization. Session holder must be at least a `SuperAdmin` in this org or a parent org.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param offset: The offset from which to return items.
        :type offset: int
        :param limit: The maximum number of items to return.
        :type limit: int
        :param sort_by: The field by which to sort.
        :type sort_by: str
        :param sort_order: The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.
        :type sort_order: str
        :param search: Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.
        :type search: str
        :param recursive: If set to true, the endpoint will return resources in some hierarchy recursively, that is, several or all levels of the hierarchy, depending on whether `maxDepth` is set. E.g. for customers this means direct and indirect customers are returned. For websites, this returns websites of all direct and indirect customers.
        :type recursive: bool
        :param max_depth: If recursive is set to true, this can be specified to limit the recursion depth. By default there is no recursion bound.
        :type max_depth: int
        :param status: Limit the result set to emails with the specified status. Only applicable if `recursive` is set to true.
        :type status: WebsiteStatus
        :param domain_id: Limit the result set to emails under domain.
        :type domain_id: str
        :param plan_id: Limit the result set to resources under subscriptions to the plan.
        :type plan_id: int
        :param subscription_id: Limit the result set to resources under subscription.
        :type subscription_id: int
        :param include_internal: Include internal emails in response
        :type include_internal: bool
        :param show_deleted: Filters out deleted emails, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.
        :type show_deleted: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_emails_serialize(
            org_id=org_id,
            offset=offset,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            search=search,
            recursive=recursive,
            max_depth=max_depth,
            status=status,
            domain_id=domain_id,
            plan_id=plan_id,
            subscription_id=subscription_id,
            include_internal=include_internal,
            show_deleted=show_deleted,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailsListing",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_emails_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        offset: Annotated[Optional[StrictInt], Field(description="The offset from which to return items.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field by which to sort.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.")] = None,
        recursive: Annotated[Optional[StrictBool], Field(description="If set to true, the endpoint will return resources in some hierarchy recursively, that is, several or all levels of the hierarchy, depending on whether `maxDepth` is set. E.g. for customers this means direct and indirect customers are returned. For websites, this returns websites of all direct and indirect customers.")] = None,
        max_depth: Annotated[Optional[StrictInt], Field(description="If recursive is set to true, this can be specified to limit the recursion depth. By default there is no recursion bound.")] = None,
        status: Annotated[Optional[WebsiteStatus], Field(description="Limit the result set to emails with the specified status. Only applicable if `recursive` is set to true.")] = None,
        domain_id: Annotated[Optional[StrictStr], Field(description="Limit the result set to emails under domain.")] = None,
        plan_id: Annotated[Optional[StrictInt], Field(description="Limit the result set to resources under subscriptions to the plan.")] = None,
        subscription_id: Annotated[Optional[StrictInt], Field(description="Limit the result set to resources under subscription.")] = None,
        include_internal: Annotated[Optional[StrictBool], Field(description="Include internal emails in response")] = None,
        show_deleted: Annotated[Optional[StrictBool], Field(description="Filters out deleted emails, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get org emails

        Returns all emails belonging to this organization. Session holder must be at least a `SuperAdmin` in this org or a parent org.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param offset: The offset from which to return items.
        :type offset: int
        :param limit: The maximum number of items to return.
        :type limit: int
        :param sort_by: The field by which to sort.
        :type sort_by: str
        :param sort_order: The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.
        :type sort_order: str
        :param search: Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.
        :type search: str
        :param recursive: If set to true, the endpoint will return resources in some hierarchy recursively, that is, several or all levels of the hierarchy, depending on whether `maxDepth` is set. E.g. for customers this means direct and indirect customers are returned. For websites, this returns websites of all direct and indirect customers.
        :type recursive: bool
        :param max_depth: If recursive is set to true, this can be specified to limit the recursion depth. By default there is no recursion bound.
        :type max_depth: int
        :param status: Limit the result set to emails with the specified status. Only applicable if `recursive` is set to true.
        :type status: WebsiteStatus
        :param domain_id: Limit the result set to emails under domain.
        :type domain_id: str
        :param plan_id: Limit the result set to resources under subscriptions to the plan.
        :type plan_id: int
        :param subscription_id: Limit the result set to resources under subscription.
        :type subscription_id: int
        :param include_internal: Include internal emails in response
        :type include_internal: bool
        :param show_deleted: Filters out deleted emails, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.
        :type show_deleted: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_emails_serialize(
            org_id=org_id,
            offset=offset,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            search=search,
            recursive=recursive,
            max_depth=max_depth,
            status=status,
            domain_id=domain_id,
            plan_id=plan_id,
            subscription_id=subscription_id,
            include_internal=include_internal,
            show_deleted=show_deleted,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailsListing",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_emails_serialize(
        self,
        org_id,
        offset,
        limit,
        sort_by,
        sort_order,
        search,
        recursive,
        max_depth,
        status,
        domain_id,
        plan_id,
        subscription_id,
        include_internal,
        show_deleted,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if recursive is not None:
            
            _query_params.append(('recursive', recursive))
            
        if max_depth is not None:
            
            _query_params.append(('maxDepth', max_depth))
            
        if status is not None:
            
            _query_params.append(('status', status.value))
            
        if domain_id is not None:
            
            _query_params.append(('domainId', domain_id))
            
        if plan_id is not None:
            
            _query_params.append(('planId', plan_id))
            
        if subscription_id is not None:
            
            _query_params.append(('subscriptionId', subscription_id))
            
        if include_internal is not None:
            
            _query_params.append(('includeInternal', include_internal))
            
        if show_deleted is not None:
            
            _query_params.append(('showDeleted', show_deleted))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/emails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_website_email(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmailDetailed:
        """Get website email

        Returns details about the given email belonging to the given website. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailDetailed",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_website_email_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmailDetailed]:
        """Get website email

        Returns details about the given email belonging to the given website. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailDetailed",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_website_email_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get website email

        Returns details about the given email belonging to the given website. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailDetailed",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_website_email_serialize(
        self,
        org_id,
        website_id,
        email_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_website_email_autoresponders(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AutorespondersFullListing:
        """Get website email autoresponders

        Returns autoresponders configured for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_autoresponders_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AutorespondersFullListing",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_website_email_autoresponders_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AutorespondersFullListing]:
        """Get website email autoresponders

        Returns autoresponders configured for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_autoresponders_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AutorespondersFullListing",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_website_email_autoresponders_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get website email autoresponders

        Returns autoresponders configured for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_autoresponders_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AutorespondersFullListing",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_website_email_autoresponders_serialize(
        self,
        org_id,
        website_id,
        email_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}/autoresponders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_website_email_client_conf(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get website email client configuration

        Returns the client configuration for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_client_conf_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_website_email_client_conf_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get website email client configuration

        Returns the client configuration for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_client_conf_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_website_email_client_conf_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get website email client configuration

        Returns the client configuration for the given email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_email_client_conf_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_website_email_client_conf_serialize(
        self,
        org_id,
        website_id,
        email_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}/client-conf',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_website_emails(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        offset: Annotated[Optional[StrictInt], Field(description="The offset from which to return items.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field by which to sort.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.")] = None,
        include_internal: Annotated[Optional[StrictBool], Field(description="Include internal emails in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmailsListing:
        """Get website emails

        Returns all emails belonging to a website. The results may optionally be sorted and paginated. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param offset: The offset from which to return items.
        :type offset: int
        :param limit: The maximum number of items to return.
        :type limit: int
        :param sort_by: The field by which to sort.
        :type sort_by: str
        :param sort_order: The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.
        :type sort_order: str
        :param search: Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.
        :type search: str
        :param include_internal: Include internal emails in response
        :type include_internal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_emails_serialize(
            org_id=org_id,
            website_id=website_id,
            offset=offset,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            search=search,
            include_internal=include_internal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailsListing",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_website_emails_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        offset: Annotated[Optional[StrictInt], Field(description="The offset from which to return items.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field by which to sort.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.")] = None,
        include_internal: Annotated[Optional[StrictBool], Field(description="Include internal emails in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmailsListing]:
        """Get website emails

        Returns all emails belonging to a website. The results may optionally be sorted and paginated. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param offset: The offset from which to return items.
        :type offset: int
        :param limit: The maximum number of items to return.
        :type limit: int
        :param sort_by: The field by which to sort.
        :type sort_by: str
        :param sort_order: The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.
        :type sort_order: str
        :param search: Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.
        :type search: str
        :param include_internal: Include internal emails in response
        :type include_internal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_emails_serialize(
            org_id=org_id,
            website_id=website_id,
            offset=offset,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            search=search,
            include_internal=include_internal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailsListing",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_website_emails_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        offset: Annotated[Optional[StrictInt], Field(description="The offset from which to return items.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field by which to sort.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.")] = None,
        include_internal: Annotated[Optional[StrictBool], Field(description="Include internal emails in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get website emails

        Returns all emails belonging to a website. The results may optionally be sorted and paginated. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param offset: The offset from which to return items.
        :type offset: int
        :param limit: The maximum number of items to return.
        :type limit: int
        :param sort_by: The field by which to sort.
        :type sort_by: str
        :param sort_order: The direction in which to sort. Possible values are 'asc' and 'desc', defaulting to 'asc'.
        :type sort_order: str
        :param search: Limit the result set to the resources whose names, partially and case insensitively, match the specified search term. E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc. A website will also be returned if the search term exactly matches the website's uuid.
        :type search: str
        :param include_internal: Include internal emails in response
        :type include_internal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_website_emails_serialize(
            org_id=org_id,
            website_id=website_id,
            offset=offset,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            search=search,
            include_internal=include_internal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailsListing",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_website_emails_serialize(
        self,
        org_id,
        website_id,
        offset,
        limit,
        sort_by,
        sort_order,
        search,
        include_internal,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if include_internal is not None:
            
            _query_params.append(('includeInternal', include_internal))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def set_domain_local_remote(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        local_remote_body: LocalRemoteBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update email local/remote status

        Sets the MTA to treat this domain as either local or remote.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param local_remote_body: (required)
        :type local_remote_body: LocalRemoteBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_domain_local_remote_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            local_remote_body=local_remote_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def set_domain_local_remote_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        local_remote_body: LocalRemoteBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update email local/remote status

        Sets the MTA to treat this domain as either local or remote.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param local_remote_body: (required)
        :type local_remote_body: LocalRemoteBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_domain_local_remote_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            local_remote_body=local_remote_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def set_domain_local_remote_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        local_remote_body: LocalRemoteBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update email local/remote status

        Sets the MTA to treat this domain as either local or remote.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param local_remote_body: (required)
        :type local_remote_body: LocalRemoteBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_domain_local_remote_serialize(
            org_id=org_id,
            website_id=website_id,
            domain_id=domain_id,
            local_remote_body=local_remote_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _set_domain_local_remote_serialize(
        self,
        org_id,
        website_id,
        domain_id,
        local_remote_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if domain_id is not None:
            _path_params['domain_id'] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if local_remote_body is not None:
            _body_params = local_remote_body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orgs/{org_id}/websites/{website_id}/domains/{domain_id}/local_remote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_domain_email_auth(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        email_auth_update: Annotated[EmailAuthUpdate, Field(description="Email auth details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update email authentication preferences

        Update DKIM setting for the mailboxes on a given domain.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param email_auth_update: Email auth details. (required)
        :type email_auth_update: EmailAuthUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            email_auth_update=email_auth_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_domain_email_auth_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        email_auth_update: Annotated[EmailAuthUpdate, Field(description="Email auth details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update email authentication preferences

        Update DKIM setting for the mailboxes on a given domain.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param email_auth_update: Email auth details. (required)
        :type email_auth_update: EmailAuthUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            email_auth_update=email_auth_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_domain_email_auth_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        email_auth_update: Annotated[EmailAuthUpdate, Field(description="Email auth details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update email authentication preferences

        Update DKIM setting for the mailboxes on a given domain.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param email_auth_update: Email auth details. (required)
        :type email_auth_update: EmailAuthUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            email_auth_update=email_auth_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_domain_email_auth_serialize(
        self,
        org_id,
        domain_id,
        email_auth_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if domain_id is not None:
            _path_params['domain_id'] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if email_auth_update is not None:
            _body_params = email_auth_update



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orgs/{org_id}/domains/{domain_id}/email-auth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_website_email(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        update_email: Annotated[UpdateEmail, Field(description="Email update details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update website email

        Updates the given email belonging to the given website. The email may have a mailbox or it may be a forwarder, which means it merely serves to forward incoming emails to the specified email addresses. If `hasMailbox` is set to false, the mailbox is deleted if it hadn't existed before, and vice versa. The email must either have a mailbox or forwarders an it must always have a delivery route. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param update_email: Email update details. (required)
        :type update_email: UpdateEmail
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            update_email=update_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_website_email_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        update_email: Annotated[UpdateEmail, Field(description="Email update details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update website email

        Updates the given email belonging to the given website. The email may have a mailbox or it may be a forwarder, which means it merely serves to forward incoming emails to the specified email addresses. If `hasMailbox` is set to false, the mailbox is deleted if it hadn't existed before, and vice versa. The email must either have a mailbox or forwarders an it must always have a delivery route. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param update_email: Email update details. (required)
        :type update_email: UpdateEmail
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            update_email=update_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_website_email_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        update_email: Annotated[UpdateEmail, Field(description="Email update details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update website email

        Updates the given email belonging to the given website. The email may have a mailbox or it may be a forwarder, which means it merely serves to forward incoming emails to the specified email addresses. If `hasMailbox` is set to false, the mailbox is deleted if it hadn't existed before, and vice versa. The email must either have a mailbox or forwarders an it must always have a delivery route. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param update_email: Email update details. (required)
        :type update_email: UpdateEmail
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_website_email_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            update_email=update_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_website_email_serialize(
        self,
        org_id,
        website_id,
        email_id,
        update_email,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_email is not None:
            _body_params = update_email



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_website_email_autoresponder(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        autoresponder_id: Annotated[StrictInt, Field(description="The id of the autoresponder.")],
        update_autoresponder: Annotated[UpdateAutoresponder, Field(description="Autoresponder update details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update website email autoresponder

        Updates the autoresponder belonging to the given website email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param autoresponder_id: The id of the autoresponder. (required)
        :type autoresponder_id: int
        :param update_autoresponder: Autoresponder update details. (required)
        :type update_autoresponder: UpdateAutoresponder
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            autoresponder_id=autoresponder_id,
            update_autoresponder=update_autoresponder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_website_email_autoresponder_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        autoresponder_id: Annotated[StrictInt, Field(description="The id of the autoresponder.")],
        update_autoresponder: Annotated[UpdateAutoresponder, Field(description="Autoresponder update details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update website email autoresponder

        Updates the autoresponder belonging to the given website email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param autoresponder_id: The id of the autoresponder. (required)
        :type autoresponder_id: int
        :param update_autoresponder: Autoresponder update details. (required)
        :type update_autoresponder: UpdateAutoresponder
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            autoresponder_id=autoresponder_id,
            update_autoresponder=update_autoresponder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_website_email_autoresponder_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        website_id: Annotated[StrictStr, Field(description="The id of the website.")],
        email_id: Annotated[StrictStr, Field(description="The id of the email.")],
        autoresponder_id: Annotated[StrictInt, Field(description="The id of the autoresponder.")],
        update_autoresponder: Annotated[UpdateAutoresponder, Field(description="Autoresponder update details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update website email autoresponder

        Updates the autoresponder belonging to the given website email. Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param website_id: The id of the website. (required)
        :type website_id: str
        :param email_id: The id of the email. (required)
        :type email_id: str
        :param autoresponder_id: The id of the autoresponder. (required)
        :type autoresponder_id: int
        :param update_autoresponder: Autoresponder update details. (required)
        :type update_autoresponder: UpdateAutoresponder
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_website_email_autoresponder_serialize(
            org_id=org_id,
            website_id=website_id,
            email_id=email_id,
            autoresponder_id=autoresponder_id,
            update_autoresponder=update_autoresponder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_website_email_autoresponder_serialize(
        self,
        org_id,
        website_id,
        email_id,
        autoresponder_id,
        update_autoresponder,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if website_id is not None:
            _path_params['website_id'] = website_id
        if email_id is not None:
            _path_params['email_id'] = email_id
        if autoresponder_id is not None:
            _path_params['autoresponder_id'] = autoresponder_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_autoresponder is not None:
            _body_params = update_autoresponder



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/orgs/{org_id}/websites/{website_id}/emails/{email_id}/autoresponders/{autoresponder_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def validate_domain_email_auth(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmailAuthValidation:
        """Validate email authentication DNS records

        Validate DKIM and SPF.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._validate_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailAuthValidation",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def validate_domain_email_auth_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmailAuthValidation]:
        """Validate email authentication DNS records

        Validate DKIM and SPF.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._validate_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailAuthValidation",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def validate_domain_email_auth_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="The id of the organization.")],
        domain_id: Annotated[StrictStr, Field(description="The id of the domain.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Validate email authentication DNS records

        Validate DKIM and SPF.

        :param org_id: The id of the organization. (required)
        :type org_id: str
        :param domain_id: The id of the domain. (required)
        :type domain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._validate_domain_email_auth_serialize(
            org_id=org_id,
            domain_id=domain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailAuthValidation",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _validate_domain_email_auth_serialize(
        self,
        org_id,
        domain_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if domain_id is not None:
            _path_params['domain_id'] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionCookie', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/domains/{domain_id}/email-auth/validate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


